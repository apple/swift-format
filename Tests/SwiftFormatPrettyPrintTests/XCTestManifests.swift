#if !canImport(ObjectiveC)
import XCTest

extension AccessorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AccessorTests = [
        ("testBasicAccessors", testBasicAccessors),
        ("testDefaultValueAndAccessor", testDefaultValueAndAccessor),
        ("testEmptyAccessorBody", testEmptyAccessorBody),
        ("testEmptyAccessorBodyWithComment", testEmptyAccessorBodyWithComment),
        ("testEmptyAccessorList", testEmptyAccessorList),
        ("testMultipleBindingsWithAccessors", testMultipleBindingsWithAccessors),
        ("testSetModifier", testSetModifier),
        ("testTypeDefaultValueAndAccessor", testTypeDefaultValueAndAccessor),
    ]
}

extension ArrayDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArrayDeclTests = [
        ("testArrayOfFunctions", testArrayOfFunctions),
        ("testBasicArrays", testBasicArrays),
        ("testGroupsTrailingComma", testGroupsTrailingComma),
        ("testInnerElementBreakingFromComma", testInnerElementBreakingFromComma),
        ("testNoTrailingCommasInTypes", testNoTrailingCommasInTypes),
        ("testTrailingCommaDiagnostics", testTrailingCommaDiagnostics),
        ("testWhitespaceOnlyDoesNotChangeTrailingComma", testWhitespaceOnlyDoesNotChangeTrailingComma),
    ]
}

extension AsExprTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AsExprTests = [
        ("testWithoutPunctuation", testWithoutPunctuation),
        ("testWithPunctuation", testWithPunctuation),
    ]
}

extension AssignmentExprTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AssignmentExprTests = [
        ("testAssignmentExprsWithGroupedOperators", testAssignmentExprsWithGroupedOperators),
        ("testAssignmentOperatorFromSequenceWithFunctionCalls", testAssignmentOperatorFromSequenceWithFunctionCalls),
        ("testAssignmentPatternBindingFromSequenceWithFunctionCalls", testAssignmentPatternBindingFromSequenceWithFunctionCalls),
        ("testBasicAssignmentExprs", testBasicAssignmentExprs),
    ]
}

extension AttributeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AttributeTests = [
        ("testAttributArgumentPerLineBreaking", testAttributArgumentPerLineBreaking),
        ("testAttributeArgumentPerLineWrapping", testAttributeArgumentPerLineWrapping),
        ("testAttributeBinPackedWrapping", testAttributeBinPackedWrapping),
        ("testAttributeFormattingRespectsDiscretionaryLineBreaks", testAttributeFormattingRespectsDiscretionaryLineBreaks),
        ("testAttributeInterArgumentBinPackedLineBreaking", testAttributeInterArgumentBinPackedLineBreaking),
        ("testAttributeParamSpacing", testAttributeParamSpacing),
        ("testIgnoresDiscretionaryLineBreakAfterColon", testIgnoresDiscretionaryLineBreakAfterColon),
        ("testObjCAttributesDiscretionaryLineBreaking", testObjCAttributesDiscretionaryLineBreaking),
        ("testObjCAttributesPerLineBreaking", testObjCAttributesPerLineBreaking),
        ("testObjCBinPackedAttributes", testObjCBinPackedAttributes),
        ("testPropertyWrappers", testPropertyWrappers),
    ]
}

extension AvailabilityConditionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AvailabilityConditionTests = [
        ("testAvailabilityCondition", testAvailabilityCondition),
        ("testAvailabilityConditionWithTrailingComment", testAvailabilityConditionWithTrailingComment),
    ]
}

extension BacktickTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BacktickTests = [
        ("testBackticks", testBackticks),
    ]
}

extension BinaryOperatorExprTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinaryOperatorExprTests = [
        ("testNonRangeFormationOperatorsAreSurroundedByBreaks", testNonRangeFormationOperatorsAreSurroundedByBreaks),
        ("testRangeFormationOperatorsAreCompactedWhenPossible", testRangeFormationOperatorsAreCompactedWhenPossible),
        ("testRangeFormationOperatorsAreNotCompactedWhenFollowingAPostfixOperator", testRangeFormationOperatorsAreNotCompactedWhenFollowingAPostfixOperator),
        ("testRangeFormationOperatorsAreNotCompactedWhenPrecedingAPrefixOperator", testRangeFormationOperatorsAreNotCompactedWhenPrecedingAPrefixOperator),
        ("testRangeFormationOperatorsAreNotCompactedWhenPrecedingPrefixDot", testRangeFormationOperatorsAreNotCompactedWhenPrecedingPrefixDot),
        ("testRangeFormationOperatorsAreNotCompactedWhenUnaryOperatorsAreOnEachSide", testRangeFormationOperatorsAreNotCompactedWhenUnaryOperatorsAreOnEachSide),
    ]
}

extension ClassDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ClassDeclTests = [
        ("testBasicClassDeclarations", testBasicClassDeclarations),
        ("testClassAttributes", testClassAttributes),
        ("testClassFullWrap", testClassFullWrap),
        ("testClassFullWrap_lineBreakAfterGenericWhereClause", testClassFullWrap_lineBreakAfterGenericWhereClause),
        ("testClassInheritance", testClassInheritance),
        ("testClassWhereClause", testClassWhereClause),
        ("testClassWhereClause_lineBreakAfterGenericWhereClause", testClassWhereClause_lineBreakAfterGenericWhereClause),
        ("testClassWhereClauseWithInheritance", testClassWhereClauseWithInheritance),
        ("testClassWhereClauseWithInheritance_lineBreakAfterGenericWhereClause", testClassWhereClauseWithInheritance_lineBreakAfterGenericWhereClause),
        ("testEmptyClass", testEmptyClass),
        ("testEmptyClassWithComment", testEmptyClassWithComment),
        ("testGenericClassDeclarations_noPackArguments", testGenericClassDeclarations_noPackArguments),
        ("testGenericClassDeclarations_packArguments", testGenericClassDeclarations_packArguments),
        ("testOneMemberClass", testOneMemberClass),
    ]
}

extension ClosureExprTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ClosureExprTests = [
        ("testArrayClosures", testArrayClosures),
        ("testBasicFunctionClosures_noPackArguments", testBasicFunctionClosures_noPackArguments),
        ("testBasicFunctionClosures_packArguments", testBasicFunctionClosures_packArguments),
        ("testBodilessClosure", testBodilessClosure),
        ("testClosureArgumentsWithTrailingClosure", testClosureArgumentsWithTrailingClosure),
        ("testClosureCapture", testClosureCapture),
        ("testClosureCaptureWithoutArguments", testClosureCaptureWithoutArguments),
        ("testClosureOutputGrouping", testClosureOutputGrouping),
        ("testClosuresWithIfs", testClosuresWithIfs),
        ("testClosureVariables", testClosureVariables),
        ("testTrailingClosure", testTrailingClosure),
    ]
}

extension CommentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CommentTests = [
        ("testBlockComments", testBlockComments),
        ("testCommentOnContinuationLine", testCommentOnContinuationLine),
        ("testCommentsAllowedInParenthesizedExpressions", testCommentsAllowedInParenthesizedExpressions),
        ("testCommentsAroundIfElseStatements", testCommentsAroundIfElseStatements),
        ("testCommentsInIfStatements", testCommentsInIfStatements),
        ("testCommentsMoveAroundOperators", testCommentsMoveAroundOperators),
        ("testContainerLineComments", testContainerLineComments),
        ("testDocumentationBlockComments", testDocumentationBlockComments),
        ("testDocumentationComments", testDocumentationComments),
        ("testDoesNotInsertExtraNewlinesAfterTrailingComments", testDoesNotInsertExtraNewlinesAfterTrailingComments),
        ("testLineCommentAtEndOfMemberDeclList", testLineCommentAtEndOfMemberDeclList),
        ("testLineComments", testLineComments),
    ]
}

extension DeclNameArgumentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DeclNameArgumentTests = [
        ("testFunctions_noPackArguments", testFunctions_noPackArguments),
        ("testFunctions_packArguments", testFunctions_packArguments),
        ("testSelectors_noPackArguments", testSelectors_noPackArguments),
        ("testSelectors_packArguments", testSelectors_packArguments),
    ]
}

extension DeinitializerDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DeinitializerDeclTests = [
        ("testBasicDeinitializerDeclarations", testBasicDeinitializerDeclarations),
        ("testDeinitializerAttributes", testDeinitializerAttributes),
        ("testEmptyDeinitializer", testEmptyDeinitializer),
    ]
}

extension DictionaryDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DictionaryDeclTests = [
        ("testBasicDictionaries", testBasicDictionaries),
        ("testDiscretionaryNewlineAfterColon", testDiscretionaryNewlineAfterColon),
        ("testGroupsTrailingComma", testGroupsTrailingComma),
        ("testInnerElementBreakingFromComma", testInnerElementBreakingFromComma),
        ("testNoTrailingCommasInTypes", testNoTrailingCommasInTypes),
        ("testTrailingCommaDiagnostics", testTrailingCommaDiagnostics),
        ("testWhitespaceOnlyDoesNotChangeTrailingComma", testWhitespaceOnlyDoesNotChangeTrailingComma),
    ]
}

extension DifferentiationAttributeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DifferentiationAttributeTests = [
        ("testDerivative", testDerivative),
        ("testDifferentiable", testDifferentiable),
        ("testDifferentiableWithMultipleParameters", testDifferentiableWithMultipleParameters),
        ("testDifferentiableWithOnlyWhereClause", testDifferentiableWithOnlyWhereClause),
        ("testTranspose", testTranspose),
    ]
}

extension DoStmtTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DoStmtTests = [
        ("testBasicDoStmt", testBasicDoStmt),
        ("testLabeledDoStmt", testLabeledDoStmt),
    ]
}

extension EnumDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EnumDeclTests = [
        ("testBasicEnumDeclarations", testBasicEnumDeclarations),
        ("testEmptyEnum", testEmptyEnum),
        ("testEmptyEnumWithComment", testEmptyEnumWithComment),
        ("testEnumAttributes", testEnumAttributes),
        ("testEnumFullWrap", testEnumFullWrap),
        ("testEnumFullWrap_lineBreakBeforeEachGenericRequirement", testEnumFullWrap_lineBreakBeforeEachGenericRequirement),
        ("testEnumInheritance", testEnumInheritance),
        ("testEnumWhereClause", testEnumWhereClause),
        ("testEnumWhereClause_lineBreakBeforeEachGenericRequirement", testEnumWhereClause_lineBreakBeforeEachGenericRequirement),
        ("testEnumWhereClauseWithInheritance", testEnumWhereClauseWithInheritance),
        ("testEnumWhereClauseWithInheritance_lineBreakBeforeEachGenericRequirement", testEnumWhereClauseWithInheritance_lineBreakBeforeEachGenericRequirement),
        ("testGenericEnumDeclarations", testGenericEnumDeclarations),
        ("testIndirectEnum", testIndirectEnum),
        ("testMixedEnumCaseStyles_noPackArguments", testMixedEnumCaseStyles_noPackArguments),
        ("testMixedEnumCaseStyles_packArguments", testMixedEnumCaseStyles_packArguments),
        ("testOneMemberEnum", testOneMemberEnum),
    ]
}

extension ExtensionDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExtensionDeclTests = [
        ("testBasicExtensionDeclarations", testBasicExtensionDeclarations),
        ("testEmptyExtension", testEmptyExtension),
        ("testEmptyExtensionWithComment", testEmptyExtensionWithComment),
        ("testExtensionAttributes", testExtensionAttributes),
        ("testExtensionFullWrap", testExtensionFullWrap),
        ("testExtensionFullWrap_lineBreakBeforeEachGenericRequirement", testExtensionFullWrap_lineBreakBeforeEachGenericRequirement),
        ("testExtensionInheritance", testExtensionInheritance),
        ("testExtensionWhereClause", testExtensionWhereClause),
        ("testExtensionWhereClause_lineBreakBeforeEachGenericRequirement", testExtensionWhereClause_lineBreakBeforeEachGenericRequirement),
        ("testExtensionWhereClauseWithInheritance", testExtensionWhereClauseWithInheritance),
        ("testExtensionWhereClauseWithInheritance_lineBreakBeforeEachGenericRequirement", testExtensionWhereClauseWithInheritance_lineBreakBeforeEachGenericRequirement),
        ("testOneMemberExtension", testOneMemberExtension),
    ]
}

extension ForInStmtTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ForInStmtTests = [
        ("testBasicForLoop", testBasicForLoop),
        ("testExplicitTypeAnnotation", testExplicitTypeAnnotation),
        ("testForCase", testForCase),
        ("testForLabels", testForLabels),
        ("testForLoopFullWrap", testForLoopFullWrap),
        ("testForStatementWithNestedExpressions", testForStatementWithNestedExpressions),
        ("testForWhereLoop", testForWhereLoop),
        ("testForWithRanges", testForWithRanges),
        ("testTypeAnnotationIgnoresDiscretionaryNewlineAfterColon", testTypeAnnotationIgnoresDiscretionaryNewlineAfterColon),
    ]
}

extension FunctionCallTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FunctionCallTests = [
        ("testArgumentStartsWithOpenDelimiter", testArgumentStartsWithOpenDelimiter),
        ("testBasicFunctionCalls_noPackArguments", testBasicFunctionCalls_noPackArguments),
        ("testBasicFunctionCalls_packArguments", testBasicFunctionCalls_packArguments),
        ("testDiscretionaryLineBreakAfterColon", testDiscretionaryLineBreakAfterColon),
        ("testDiscretionaryLineBreakBeforeClosingParenthesis", testDiscretionaryLineBreakBeforeClosingParenthesis),
        ("testDiscretionaryLineBreakBeforeTrailingClosure", testDiscretionaryLineBreakBeforeTrailingClosure),
        ("testDiscretionaryLineBreaksAreSelfCorrecting", testDiscretionaryLineBreaksAreSelfCorrecting),
        ("testGroupsTrailingComma", testGroupsTrailingComma),
        ("testNestedFunctionCallExprSequences", testNestedFunctionCallExprSequences),
        ("testSingleUnlabeledArgumentWithDelimiters", testSingleUnlabeledArgumentWithDelimiters),
    ]
}

extension FunctionDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FunctionDeclTests = [
        ("testAttributedTypes", testAttributedTypes),
        ("testBasicFunctionDeclarations_noPackArguments", testBasicFunctionDeclarations_noPackArguments),
        ("testBasicFunctionDeclarations_packArguments", testBasicFunctionDeclarations_packArguments),
        ("testBodilessFunctionDecl", testBodilessFunctionDecl),
        ("testBreaksBeforeOrInsideOutput", testBreaksBeforeOrInsideOutput),
        ("testBreaksBeforeOrInsideOutput_prioritizingKeepingOutputTogether", testBreaksBeforeOrInsideOutput_prioritizingKeepingOutputTogether),
        ("testBreaksBeforeOrInsideOutputWithAttributes", testBreaksBeforeOrInsideOutputWithAttributes),
        ("testBreaksBeforeOrInsideOutputWithAttributes_prioritizingKeepingOutputTogether", testBreaksBeforeOrInsideOutputWithAttributes_prioritizingKeepingOutputTogether),
        ("testBreaksBeforeOrInsideOutputWithWhereClause", testBreaksBeforeOrInsideOutputWithWhereClause),
        ("testBreaksBeforeOrInsideOutputWithWhereClause_prioritizingKeepingOutputTogether", testBreaksBeforeOrInsideOutputWithWhereClause_prioritizingKeepingOutputTogether),
        ("testDiscretionaryLineBreakAfterColonAndInout", testDiscretionaryLineBreakAfterColonAndInout),
        ("testDoesNotBreakInsideEmptyParens", testDoesNotBreakInsideEmptyParens),
        ("testDoesNotCollapseFunctionParameterAttributes", testDoesNotCollapseFunctionParameterAttributes),
        ("testDoesNotCollapseStackedFunctionParameterAttributes", testDoesNotCollapseStackedFunctionParameterAttributes),
        ("testEmptyFunction", testEmptyFunction),
        ("testFunctionAttributes", testFunctionAttributes),
        ("testFunctionDeclReturns", testFunctionDeclReturns),
        ("testFunctionDeclThrows", testFunctionDeclThrows),
        ("testFunctionFullWrap", testFunctionFullWrap),
        ("testFunctionFullWrap_lineBreakBeforeEachGenericRequirement", testFunctionFullWrap_lineBreakBeforeEachGenericRequirement),
        ("testFunctionGenericParameters_noPackArguments", testFunctionGenericParameters_noPackArguments),
        ("testFunctionGenericParameters_packArguments", testFunctionGenericParameters_packArguments),
        ("testFunctionWhereClause", testFunctionWhereClause),
        ("testFunctionWhereClause_lineBreakBeforeEachGenericRequirement", testFunctionWhereClause_lineBreakBeforeEachGenericRequirement),
        ("testFunctionWithDefer", testFunctionWithDefer),
        ("testOperatorOverloads", testOperatorOverloads),
        ("testRemovesLineBreakBeforeOpenBraceUnlessAbsolutelyNecessary", testRemovesLineBreakBeforeOpenBraceUnlessAbsolutelyNecessary),
    ]
}

extension FunctionTypeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FunctionTypeTests = [
        ("testFunctionType", testFunctionType),
        ("testFunctionTypeInOut", testFunctionTypeInOut),
        ("testFunctionTypeThrows", testFunctionTypeThrows),
    ]
}

extension GarbageTextTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GarbageTextTests = [
        ("testBOM", testBOM),
        ("testBOMPresenceDoesNotPermitLeadingNewlines", testBOMPresenceDoesNotPermitLeadingNewlines),
        ("testConflictMarkers", testConflictMarkers),
        ("testHashBang", testHashBang),
        ("testUnknownCodePointAsLeadingTrivia", testUnknownCodePointAsLeadingTrivia),
        ("testUnknownCodePointAsTrailingTriviaAreGluedToPreviousToken", testUnknownCodePointAsTrailingTriviaAreGluedToPreviousToken),
    ]
}

extension GuardStmtTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GuardStmtTests = [
        ("testCompoundClauses", testCompoundClauses),
        ("testContinuationLineBreaking", testContinuationLineBreaking),
        ("testGuardStatement", testGuardStatement),
        ("testGuardWithFuncCall", testGuardWithFuncCall),
        ("testOpenBraceIsGluedToElseKeyword", testOpenBraceIsGluedToElseKeyword),
        ("testOptionalBindingConditions", testOptionalBindingConditions),
        ("testParenthesizedClauses", testParenthesizedClauses),
    ]
}

extension IfConfigTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IfConfigTests = [
        ("testBasicIfConfig", testBasicIfConfig),
        ("testIfConfigNoIndentation", testIfConfigNoIndentation),
        ("testInvalidDiscretionaryLineBreaksRemoved", testInvalidDiscretionaryLineBreaksRemoved),
        ("testPoundIfAroundMembers", testPoundIfAroundMembers),
        ("testPrettyPrintLineBreaksDisabled", testPrettyPrintLineBreaksDisabled),
        ("testValidDiscretionaryLineBreaksRetained", testValidDiscretionaryLineBreaksRetained),
    ]
}

extension IfStmtTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IfStmtTests = [
        ("testCompoundClauses", testCompoundClauses),
        ("testConditionExpressionOperatorGrouping", testConditionExpressionOperatorGrouping),
        ("testConditionExpressionOperatorGroupingMixedWithParentheses", testConditionExpressionOperatorGroupingMixedWithParentheses),
        ("testContinuationLineBreakIndentation", testContinuationLineBreakIndentation),
        ("testHangingOpenBreakIsTreatedLikeContinuation", testHangingOpenBreakIsTreatedLikeContinuation),
        ("testIfElseStatement_breakBeforeElse", testIfElseStatement_breakBeforeElse),
        ("testIfElseStatement_noBreakBeforeElse", testIfElseStatement_noBreakBeforeElse),
        ("testIfLetStatements", testIfLetStatements),
        ("testIfStatement", testIfStatement),
        ("testLabeledIfStmt", testLabeledIfStmt),
        ("testMatchingPatternConditions", testMatchingPatternConditions),
        ("testMultipleIfStmts", testMultipleIfStmts),
        ("testOptionalBindingConditions", testOptionalBindingConditions),
        ("testParenthesizedClauses", testParenthesizedClauses),
    ]
}

extension IgnoreNodeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IgnoreNodeTests = [
        ("testIgnoreInvalidAfterFirstToken", testIgnoreInvalidAfterFirstToken),
        ("testIgnoreMemberDeclListItems", testIgnoreMemberDeclListItems),
        ("testIgnoresNestedMembers", testIgnoresNestedMembers),
        ("testIgnoreWholeFile", testIgnoreWholeFile),
        ("testIgnoreWholeFileInNestedNode", testIgnoreWholeFileInNestedNode),
        ("testInvalidComment", testInvalidComment),
        ("testValidComment", testValidComment),
    ]
}

extension ImportTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ImportTests = [
        ("testImports", testImports),
    ]
}

extension InitializerDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InitializerDeclTests = [
        ("testBasicInitializerDeclarations_noPackArguments", testBasicInitializerDeclarations_noPackArguments),
        ("testBasicInitializerDeclarations_packArguments", testBasicInitializerDeclarations_packArguments),
        ("testEmptyInitializer", testEmptyInitializer),
        ("testInitializerAttributes", testInitializerAttributes),
        ("testInitializerDeclThrows", testInitializerDeclThrows),
        ("testInitializerFullWrap", testInitializerFullWrap),
        ("testInitializerFullWrap_lineBreakBeforeEachGenericRequirement", testInitializerFullWrap_lineBreakBeforeEachGenericRequirement),
        ("testInitializerGenericParameters", testInitializerGenericParameters),
        ("testInitializerOptionality", testInitializerOptionality),
        ("testInitializerWhereClause", testInitializerWhereClause),
        ("testInitializerWhereClause_lineBreakBeforeEachGenericRequirement", testInitializerWhereClause_lineBreakBeforeEachGenericRequirement),
    ]
}

extension MemberAccessExprTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MemberAccessExprTests = [
        ("testBaselessMemberAccess", testBaselessMemberAccess),
        ("testChainedSubscriptExprs", testChainedSubscriptExprs),
        ("testChainedTrailingClosureMethods", testChainedTrailingClosureMethods),
        ("testChainsUsingNonTrailingClosures", testChainsUsingNonTrailingClosures),
        ("testContinuationRestorationAfterGroup", testContinuationRestorationAfterGroup),
        ("testImplicitMemberAccess", testImplicitMemberAccess),
        ("testMemberAccess", testMemberAccess),
        ("testMemberItemClosureChaining", testMemberItemClosureChaining),
        ("testMethodChainingWithClosures", testMethodChainingWithClosures),
        ("testMethodChainingWithClosuresFullWrap", testMethodChainingWithClosuresFullWrap),
        ("testOperatorChainedMemberAccessExprs", testOperatorChainedMemberAccessExprs),
    ]
}

extension MemberTypeIdentifierTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MemberTypeIdentifierTests = [
        ("testMemberTypes", testMemberTypes),
    ]
}

extension NewlineTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NewlineTests = [
        ("testLeadingNewlines", testLeadingNewlines),
        ("testLeadingNewlinesWithComments", testLeadingNewlinesWithComments),
        ("testNewlinesBetweenMembers", testNewlinesBetweenMembers),
        ("testTrailingNewlines", testTrailingNewlines),
        ("testTrailingNewlinesWithComments", testTrailingNewlinesWithComments),
    ]
}

extension ObjectLiteralExprTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ObjectLiteralExprTests = [
        ("testColorLiteral_noPackArguments", testColorLiteral_noPackArguments),
        ("testColorLiteral_packArguments", testColorLiteral_packArguments),
        ("testGroupsTrailingComma", testGroupsTrailingComma),
        ("testImageLiteral_noPackArguments", testImageLiteral_noPackArguments),
        ("testImageLiteral_packArguments", testImageLiteral_packArguments),
    ]
}

extension OperatorDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OperatorDeclTests = [
        ("testOperatorDecl", testOperatorDecl),
        ("testPrecedenceGroups", testPrecedenceGroups),
    ]
}

extension ParenthesizedExprTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParenthesizedExprTests = [
        ("testComplexConditionalWithParens", testComplexConditionalWithParens),
        ("testExpressionStartsWithParentheses", testExpressionStartsWithParentheses),
        ("testInitializerClauseParens", testInitializerClauseParens),
        ("testNestedParentheses", testNestedParentheses),
        ("testSequenceExprParens", testSequenceExprParens),
        ("testTupleSequenceExprs", testTupleSequenceExprs),
    ]
}

extension PatternBindingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PatternBindingTests = [
        ("testBindingIncludingTypeAnnotation", testBindingIncludingTypeAnnotation),
        ("testGroupingIncludesTrailingComma", testGroupingIncludesTrailingComma),
        ("testIgnoresDiscretionaryNewlineAfterColon", testIgnoresDiscretionaryNewlineAfterColon),
    ]
}

extension ProtocolDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ProtocolDeclTests = [
        ("testBasicProtocolDeclarations", testBasicProtocolDeclarations),
        ("testEmptyProtocol", testEmptyProtocol),
        ("testEmptyProtocolWithComment", testEmptyProtocolWithComment),
        ("testOneMemberProtocol", testOneMemberProtocol),
        ("testProtocolAttributes", testProtocolAttributes),
        ("testProtocolInheritance", testProtocolInheritance),
        ("testProtocolWithAssociatedtype", testProtocolWithAssociatedtype),
        ("testProtocolWithFunctions", testProtocolWithFunctions),
        ("testProtocolWithInitializers", testProtocolWithInitializers),
    ]
}

extension RepeatStmtTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RepeatStmtTests = [
        ("testBasicRepeatTests_breakBeforeWhile", testBasicRepeatTests_breakBeforeWhile),
        ("testBasicRepeatTests_noBreakBeforeWhile", testBasicRepeatTests_noBreakBeforeWhile),
        ("testLabeledRepeat", testLabeledRepeat),
        ("testNestedRepeat", testNestedRepeat),
    ]
}

extension RespectsExistingLineBreaksTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RespectsExistingLineBreaksTests = [
        ("testCodeBlocksAndMemberDecls", testCodeBlocksAndMemberDecls),
        ("testExpressions", testExpressions),
        ("testInvalidBreaksAreAlwaysRejected", testInvalidBreaksAreAlwaysRejected),
        ("testSemicolons", testSemicolons),
    ]
}

extension SemiColonTypeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SemiColonTypeTests = [
        ("testNoSemicolon", testNoSemicolon),
        ("testSemicolon", testSemicolon),
    ]
}

extension SequenceExprFoldingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SequenceExprFoldingTests = [
        ("testAssignment", testAssignment),
        ("testBinaryMixedPrecedence", testBinaryMixedPrecedence),
        ("testComplexCastExpressions", testComplexCastExpressions),
        ("testComplexTernary", testComplexTernary),
        ("testCustomOperator", testCustomOperator),
        ("testDifferentOperatorsSamePrecedence", testDifferentOperatorsSamePrecedence),
        ("testMixedAssociativity", testMixedAssociativity),
        ("testMixedCastsTriesAndTernaries", testMixedCastsTriesAndTernaries),
        ("testNestedTernary", testNestedTernary),
        ("testSimpleBinaryExprIsUnchanged", testSimpleBinaryExprIsUnchanged),
        ("testSimpleBinaryExprLeftAssociativity", testSimpleBinaryExprLeftAssociativity),
        ("testSimpleBinaryExprRightAssociativity", testSimpleBinaryExprRightAssociativity),
        ("testSimpleCastExpressions", testSimpleCastExpressions),
        ("testSimpleTernary", testSimpleTernary),
        ("testTryFolding", testTryFolding),
        ("testTryTernaryFolding", testTryTernaryFolding),
        ("testUnrecognizedOperators", testUnrecognizedOperators),
    ]
}

extension SomeTypeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SomeTypeTests = [
        ("testSomeTypes", testSomeTypes),
    ]
}

extension StringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringTests = [
        ("testMultilineRawString", testMultilineRawString),
        ("testMultilineRawStringOpenQuotesWrap", testMultilineRawStringOpenQuotesWrap),
        ("testMultilineStringAutocorrectMisalignedLines", testMultilineStringAutocorrectMisalignedLines),
        ("testMultilineStringInterpolations", testMultilineStringInterpolations),
        ("testMultilineStringIsReindentedCorrectly", testMultilineStringIsReindentedCorrectly),
        ("testMultilineStringKeepsBlankLines", testMultilineStringKeepsBlankLines),
        ("testMultilineStringOpenQuotesDoNotWrapIfStringIsVeryLong", testMultilineStringOpenQuotesDoNotWrapIfStringIsVeryLong),
        ("testStrings", testStrings),
    ]
}

extension StructDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StructDeclTests = [
        ("testBasicStructDeclarations", testBasicStructDeclarations),
        ("testEmptyStruct", testEmptyStruct),
        ("testEmptyStructWithComment", testEmptyStructWithComment),
        ("testGenericStructDeclarations_noPackArguments", testGenericStructDeclarations_noPackArguments),
        ("testGenericStructDeclarations_packArguments", testGenericStructDeclarations_packArguments),
        ("testOneMemberStruct", testOneMemberStruct),
        ("testStructAttributes", testStructAttributes),
        ("testStructFullWrap", testStructFullWrap),
        ("testStructFullWrap_lineBreakBeforeEachGenericRequirement", testStructFullWrap_lineBreakBeforeEachGenericRequirement),
        ("testStructInheritance", testStructInheritance),
        ("testStructWhereClause", testStructWhereClause),
        ("testStructWhereClause_lineBreakBeforeEachGenericRequirement", testStructWhereClause_lineBreakBeforeEachGenericRequirement),
        ("testStructWhereClauseWithInheritance", testStructWhereClauseWithInheritance),
        ("testStructWhereClauseWithInheritance_lineBreakBeforeEachGenericRequirement", testStructWhereClauseWithInheritance_lineBreakBeforeEachGenericRequirement),
    ]
}

extension SubscriptDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SubscriptDeclTests = [
        ("testBasicSubscriptDeclarations", testBasicSubscriptDeclarations),
        ("testBreaksBeforeOrInsideOutput", testBreaksBeforeOrInsideOutput),
        ("testBreaksBeforeOrInsideOutput_prioritizingKeepingOutputTogether", testBreaksBeforeOrInsideOutput_prioritizingKeepingOutputTogether),
        ("testEmptySubscript", testEmptySubscript),
        ("testSubscriptAttributes", testSubscriptAttributes),
        ("testSubscriptFullWrap", testSubscriptFullWrap),
        ("testSubscriptFullWrap_lineBreakBeforeEachGenericRequirement", testSubscriptFullWrap_lineBreakBeforeEachGenericRequirement),
        ("testSubscriptGenerics_noPackArguments", testSubscriptGenerics_noPackArguments),
        ("testSubscriptGenerics_packArguments", testSubscriptGenerics_packArguments),
        ("testSubscriptGenericWhere", testSubscriptGenericWhere),
        ("testSubscriptGenericWhere_lineBreakBeforeEachGenericRequirement", testSubscriptGenericWhere_lineBreakBeforeEachGenericRequirement),
    ]
}

extension SubscriptExprTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SubscriptExprTests = [
        ("testBasicSubscriptGetters", testBasicSubscriptGetters),
        ("testBasicSubscriptSetters", testBasicSubscriptSetters),
        ("testDiscretionaryLineBreakBeforeTrailingClosure", testDiscretionaryLineBreakBeforeTrailingClosure),
        ("testGroupsTrailingComma", testGroupsTrailingComma),
        ("testSubscriptGettersWithTrailingClosures", testSubscriptGettersWithTrailingClosures),
        ("testSubscriptSettersWithTrailingClosures", testSubscriptSettersWithTrailingClosures),
    ]
}

extension SwitchCaseIndentConfigTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwitchCaseIndentConfigTests = [
        ("testIndentationConfiguredAndInput", testIndentationConfiguredAndInput),
        ("testIndentationConfiguredCaseBodyAndStatementNotIndented", testIndentationConfiguredCaseBodyAndStatementNotIndented),
        ("testIndentationConfiguredCaseBodyNotIndented", testIndentationConfiguredCaseBodyNotIndented),
        ("testIndentationConfiguredCaseBodySameLine", testIndentationConfiguredCaseBodySameLine),
        ("testIndentationConfiguredNotInput", testIndentationConfiguredNotInput),
        ("testIndentationNotConfiguredButInput", testIndentationNotConfiguredButInput),
        ("testIndentationNotConfiguredCaseBodyNotIndented", testIndentationNotConfiguredCaseBodyNotIndented),
        ("testIndentationNotConfiguredNotInput", testIndentationNotConfiguredNotInput),
    ]
}

extension SwitchStmtTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SwitchStmtTests = [
        ("testBasicSwitch", testBasicSwitch),
        ("testLabeledSwitchStmt", testLabeledSwitchStmt),
        ("testNestedSwitch", testNestedSwitch),
        ("testNewlinesDisambiguatingWhereClauses", testNewlinesDisambiguatingWhereClauses),
        ("testSwitchCases", testSwitchCases),
        ("testSwitchCompoundCases", testSwitchCompoundCases),
        ("testSwitchSequenceExprCases", testSwitchSequenceExprCases),
        ("testSwitchValueBinding", testSwitchValueBinding),
        ("testUnknownDefault", testUnknownDefault),
    ]
}

extension TernaryExprTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TernaryExprTests = [
        ("testExpressionStartsWithTernary", testExpressionStartsWithTernary),
        ("testNestedTernaries", testNestedTernaries),
        ("testParenthesizedTernary", testParenthesizedTernary),
        ("testTernaryExprs", testTernaryExprs),
        ("testTernaryExprsWithMultiplePartChoices", testTernaryExprsWithMultiplePartChoices),
        ("testTernaryWithWrappingExpressions", testTernaryWithWrappingExpressions),
    ]
}

extension TryCatchTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TryCatchTests = [
        ("testBasicTries", testBasicTries),
        ("testCatchWhere_breakBeforeCatch", testCatchWhere_breakBeforeCatch),
        ("testCatchWhere_noBreakBeforeCatch", testCatchWhere_noBreakBeforeCatch),
        ("testDoTryCatch_breakBeforeCatch", testDoTryCatch_breakBeforeCatch),
        ("testDoTryCatch_noBreakBeforeCatch", testDoTryCatch_noBreakBeforeCatch),
        ("testNestedDo", testNestedDo),
    ]
}

extension TupleDeclTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TupleDeclTests = [
        ("testBasicTuples", testBasicTuples),
        ("testDiscretionaryNewlineAfterColon", testDiscretionaryNewlineAfterColon),
        ("testGroupsTrailingComma", testGroupsTrailingComma),
        ("testLabeledTuples", testLabeledTuples),
    ]
}

extension TypeAliasTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TypeAliasTests = [
        ("testTypealias", testTypealias),
        ("testTypealiasAttributes", testTypealiasAttributes),
        ("testTypealiasGenericTests", testTypealiasGenericTests),
    ]
}

extension UnknownNodeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UnknownNodeTests = [
        ("testNonEmptyTokenList", testNonEmptyTokenList),
        ("testUnknownDecl", testUnknownDecl),
        ("testUnknownExpr", testUnknownExpr),
        ("testUnknownPattern", testUnknownPattern),
        ("testUnknownStmt", testUnknownStmt),
        ("testUnknownType", testUnknownType),
    ]
}

extension VariableDeclarationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VariableDeclarationTests = [
        ("testBasicVariableDecl", testBasicVariableDecl),
        ("testMultipleBindings", testMultipleBindings),
        ("testMultipleBindingsWithTypeAnnotations", testMultipleBindingsWithTypeAnnotations),
        ("testVariableDeclWithAttributes", testVariableDeclWithAttributes),
    ]
}

extension WhileStmtTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__WhileStmtTests = [
        ("testBasicWhileLoops", testBasicWhileLoops),
        ("testLabeledWhileLoops", testLabeledWhileLoops),
        ("testWhileLoopMultipleConditionElements", testWhileLoopMultipleConditionElements),
    ]
}

extension YieldStmtTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__YieldStmtTests = [
        ("testBasic", testBasic),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AccessorTests.__allTests__AccessorTests),
        testCase(ArrayDeclTests.__allTests__ArrayDeclTests),
        testCase(AsExprTests.__allTests__AsExprTests),
        testCase(AssignmentExprTests.__allTests__AssignmentExprTests),
        testCase(AttributeTests.__allTests__AttributeTests),
        testCase(AvailabilityConditionTests.__allTests__AvailabilityConditionTests),
        testCase(BacktickTests.__allTests__BacktickTests),
        testCase(BinaryOperatorExprTests.__allTests__BinaryOperatorExprTests),
        testCase(ClassDeclTests.__allTests__ClassDeclTests),
        testCase(ClosureExprTests.__allTests__ClosureExprTests),
        testCase(CommentTests.__allTests__CommentTests),
        testCase(DeclNameArgumentTests.__allTests__DeclNameArgumentTests),
        testCase(DeinitializerDeclTests.__allTests__DeinitializerDeclTests),
        testCase(DictionaryDeclTests.__allTests__DictionaryDeclTests),
        testCase(DifferentiationAttributeTests.__allTests__DifferentiationAttributeTests),
        testCase(DoStmtTests.__allTests__DoStmtTests),
        testCase(EnumDeclTests.__allTests__EnumDeclTests),
        testCase(ExtensionDeclTests.__allTests__ExtensionDeclTests),
        testCase(ForInStmtTests.__allTests__ForInStmtTests),
        testCase(FunctionCallTests.__allTests__FunctionCallTests),
        testCase(FunctionDeclTests.__allTests__FunctionDeclTests),
        testCase(FunctionTypeTests.__allTests__FunctionTypeTests),
        testCase(GarbageTextTests.__allTests__GarbageTextTests),
        testCase(GuardStmtTests.__allTests__GuardStmtTests),
        testCase(IfConfigTests.__allTests__IfConfigTests),
        testCase(IfStmtTests.__allTests__IfStmtTests),
        testCase(IgnoreNodeTests.__allTests__IgnoreNodeTests),
        testCase(ImportTests.__allTests__ImportTests),
        testCase(InitializerDeclTests.__allTests__InitializerDeclTests),
        testCase(MemberAccessExprTests.__allTests__MemberAccessExprTests),
        testCase(MemberTypeIdentifierTests.__allTests__MemberTypeIdentifierTests),
        testCase(NewlineTests.__allTests__NewlineTests),
        testCase(ObjectLiteralExprTests.__allTests__ObjectLiteralExprTests),
        testCase(OperatorDeclTests.__allTests__OperatorDeclTests),
        testCase(ParenthesizedExprTests.__allTests__ParenthesizedExprTests),
        testCase(PatternBindingTests.__allTests__PatternBindingTests),
        testCase(ProtocolDeclTests.__allTests__ProtocolDeclTests),
        testCase(RepeatStmtTests.__allTests__RepeatStmtTests),
        testCase(RespectsExistingLineBreaksTests.__allTests__RespectsExistingLineBreaksTests),
        testCase(SemiColonTypeTests.__allTests__SemiColonTypeTests),
        testCase(SequenceExprFoldingTests.__allTests__SequenceExprFoldingTests),
        testCase(SomeTypeTests.__allTests__SomeTypeTests),
        testCase(StringTests.__allTests__StringTests),
        testCase(StructDeclTests.__allTests__StructDeclTests),
        testCase(SubscriptDeclTests.__allTests__SubscriptDeclTests),
        testCase(SubscriptExprTests.__allTests__SubscriptExprTests),
        testCase(SwitchCaseIndentConfigTests.__allTests__SwitchCaseIndentConfigTests),
        testCase(SwitchStmtTests.__allTests__SwitchStmtTests),
        testCase(TernaryExprTests.__allTests__TernaryExprTests),
        testCase(TryCatchTests.__allTests__TryCatchTests),
        testCase(TupleDeclTests.__allTests__TupleDeclTests),
        testCase(TypeAliasTests.__allTests__TypeAliasTests),
        testCase(UnknownNodeTests.__allTests__UnknownNodeTests),
        testCase(VariableDeclarationTests.__allTests__VariableDeclarationTests),
        testCase(WhileStmtTests.__allTests__WhileStmtTests),
        testCase(YieldStmtTests.__allTests__YieldStmtTests),
    ]
}
#endif
